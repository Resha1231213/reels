from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.FinalGenerateState import FinalGenerateState

router = Router()

@router.message(Command("start"))
async def cmd_start(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Reels.")

@router.message(Command("create"))
async def start_create(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞.")
    await state.set_state(FinalGenerateState.waiting_for_avatar)

@router.message(FinalGenerateState.waiting_for_avatar, F.photo | F.video | F.document)
async def avatar_uploaded(msg: Message, state: FSMContext):
    file_id = (
        msg.photo[-1].file_id if msg.photo
        else msg.video.file_id if msg.video
        else msg.document.file_id if msg.document
        else None
    )
    if not file_id:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ!")
        return
    await state.update_data(avatar_file_id=file_id)
    await msg.answer("–§–æ—Ç–æ/–≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")
    await state.set_state(FinalGenerateState.waiting_for_voice)

@router.message(FinalGenerateState.waiting_for_voice, F.voice | F.audio)
async def voice_uploaded(msg: Message, state: FSMContext):
    voice_id = msg.voice.file_id if msg.voice else msg.audio.file_id if msg.audio else None
    if not voice_id:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª!")
        return
    await state.update_data(voice_file_id=voice_id)
    await msg.answer("–ì–æ–ª–æ—Å –ø–æ–ª—É—á–µ–Ω! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
    await state.set_state(FinalGenerateState.enter_script)

@router.message(FinalGenerateState.enter_script, F.text)
async def script_uploaded(msg: Message, state: FSMContext):
    await state.update_data(script=msg.text)
    await msg.answer("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–ª—É—á–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(FinalGenerateState.with_subtitles)

@router.message(FinalGenerateState.with_subtitles, F.text.casefold().in_(["–¥–∞", "–Ω–µ—Ç"]))
async def handle_subtitles_choice(msg: Message, state: FSMContext):
    if msg.text.casefold() == "–¥–∞":
        await msg.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .ttf —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å—Ç–∞–Ω–¥–∞—Ä—Ç' –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞.")
        await state.set_state(FinalGenerateState.upload_font)
    else:
        await state.update_data(subtitles=False)
        await msg.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –±–µ–∑ —Å—É–±—Ç–∏—Ç—Ä–æ–≤...")
        await state.set_state(FinalGenerateState.confirm_generate)
        await generate_reels_state(msg, state)

@router.message(FinalGenerateState.upload_font, F.document)
async def handle_font_upload(msg: Message, state: FSMContext):
    font_id = msg.document.file_id
    await state.update_data(font_file_id=font_id, subtitles=True)
    await msg.answer("–®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    await state.set_state(FinalGenerateState.confirm_generate)
    await generate_reels_state(msg, state)

@router.message(FinalGenerateState.upload_font, F.text.casefold() == "—Å—Ç–∞–Ω–¥–∞—Ä—Ç")
async def handle_standard_font(msg: Message, state: FSMContext):
    await state.update_data(font_file_id=None, subtitles=True)
    await msg.answer("–ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ...")
    await state.set_state(FinalGenerateState.confirm_generate)
    await generate_reels_state(msg, state)

@router.message(FinalGenerateState.confirm_generate)
async def generate_reels_state(msg: Message, state: FSMContext):
    data = await state.get_data()
    # –ó–¥–µ—Å—å –≤—ã–∑–æ–≤–∏ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
    # result_path = generate_reels(**data)
    # await msg.answer_video(video=FSInputFile(result_path), caption="üé¨ –í–∞—à Reels –≥–æ—Ç–æ–≤!")
    await msg.answer("üé¨ –í–∞—à Reels –≥–æ—Ç–æ–≤! (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ)")
    await state.clear()