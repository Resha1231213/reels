from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states.FinalGenerateState import FinalGenerateState
from utils.generate_reels import generate_reels

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reels. –ù–∞–∂–º–∏—Ç–µ /create —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@router.message(Command("create"))
async def cmd_create(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(FinalGenerateState.waiting_for_avatar)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞ (–¥–æ 5 —Ñ–∞–π–ª–æ–≤).")

@router.message(FinalGenerateState.waiting_for_avatar, F.photo | F.video)
async def handle_avatar(message: Message, state: FSMContext):
    file = message.photo[-1] if message.photo else message.video
    file_id = file.file_id
    await state.update_data(avatar=file_id)
    await state.set_state(FinalGenerateState.waiting_for_voice)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")

@router.message(FinalGenerateState.waiting_for_voice, F.voice | F.audio)
async def handle_voice(message: Message, state: FSMContext):
    file = message.voice or message.audio
    file_id = file.file_id
    await state.update_data(voice=file_id)
    await state.set_state(FinalGenerateState.enter_script)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π (—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ).")

@router.message(FinalGenerateState.enter_script)
async def handle_script(message: Message, state: FSMContext):
    await state.update_data(script=message.text)
    await state.set_state(FinalGenerateState.select_language)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏: RU / EN / FR")

@router.message(FinalGenerateState.select_language, F.text.in_(["RU", "EN", "FR"]))
async def handle_language(message: Message, state: FSMContext):
    await state.update_data(language=message.text)
    await state.set_state(FinalGenerateState.select_format)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ: —Ñ—É–ª—Å–∫—Ä–∏–Ω / 50/50 / –∫—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä")

@router.message(FinalGenerateState.select_format, F.text.in_(["—Ñ—É–ª—Å–∫—Ä–∏–Ω", "50/50", "–∫—Ä—É–≥–ª—ã–π –∞–≤–∞—Ç–∞—Ä"]))
async def handle_format(message: Message, state: FSMContext):
    await state.update_data(format=message.text)
    await state.set_state(FinalGenerateState.with_subtitles)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã? –î–∞ / –ù–µ—Ç")

@router.message(FinalGenerateState.with_subtitles, F.text.in_(["–î–∞", "–ù–µ—Ç"]))
async def handle_subtitles(message: Message, state: FSMContext):
    await state.update_data(subtitles=(message.text == "–î–∞"))
    await state.set_state(FinalGenerateState.confirm_generate)
    await message.answer("–í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! –ù–∞–ø–∏—à–∏—Ç–µ '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

@router.message(FinalGenerateState.confirm_generate, F.text.casefold() == "–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å")
async def handle_generate(message: Message, state: FSMContext):
    data = await state.get_data()
    result_path = await generate_reels(
        avatar=data.get("avatar"),
        voice=data.get("voice"),
        script=data.get("script"),
        lang=data.get("language"),
        format_type=data.get("format"),
        with_subtitles=data.get("subtitles"),
        user_id=message.from_user.id,
        bot=message.bot
    )
    if result_path:
        await message.answer_video(open(result_path, "rb"), caption="üé¨ –í–∞—à Reels –≥–æ—Ç–æ–≤!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
    await state.clear()